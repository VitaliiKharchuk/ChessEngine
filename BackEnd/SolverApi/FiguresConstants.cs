using System.Collections.Generic;

namespace SolverApi
{
    public static class FiguresConstants
    {
        public static Dictionary<char, double[,]> FigureFactor = new Dictionary<char, double[,]>
        {
                {
                    'K', new double [8,8]
                    {
                        { 2.0, 3.0, 1.0, 0.0, 0.0, 1.0, 3.0, 2.0},
                        { 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0},
                        { -1.0, -2.0, -2.0, -2.0, -2.0,-2.0,-2.0, -1.0},
                        { -2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0},
                        { -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
                        { -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
                        { -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
                        { -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
                    }
                },
                {
                    'Q', new double [8,8]
                    {
                        { -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0},
                        { -1.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, -1.0},
                        { -1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0},
                        { 0.0,  0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5},
                        { -0.5, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5},
                        { -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0},
                        { -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0},
                        { -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0},
                    }
                },
                {
                    'R', new double [8,8]
                    {
                        { 0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0},
                        { -0.5,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5},
                        { -0.5,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5},
                        { -0.5,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5},
                        { -0.5,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5},
                        { -0.5,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5},
                        { 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5},
                        { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                    }
                },
                {
                    'B', new double [8,8]
                    {
                        { 2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0},
                        { -1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0 },
                        { -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0 },
                        { -1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, -1.0 },
                        { -1.0,  0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0 },
                        { -1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0 },
                        { -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0 },
                        {-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0 },
                    }
                },
                {
                    'N', new double [8,8]
                    {
                        { -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0},
                        { -4.0,  -2.0, 0.0, 0.5, 0.5, 0.0, -2.0, -4.0},
                        { -3.0,  0.5, 1.0, 1.5, 1.5, 1.0, 0.5, -3.0},
                        { -3.0,  0.0, 1.5, 2.0, 2.0, 1.5, 0.0, -3.0},
                        { -3.0,  0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0},
                        { -3.0,  0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0},
                        { -4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0},
                        { -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0},
                    }
                },
                {
                    'P', new double [8,8]
                    {
                        { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        { 0.5,  1.0, 1.0, -2.0, -2.0, 1.0, 1.0, 0.5},
                        { 0.5, -0.5, -1.0, 0.0, 0.0, -1.0, -0.5, 0.5},
                        { 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0},
                        { 0.5, 0.5, 1.0, 2.5, 2.5, 1.0, 0.5, 0.5},
                        { 1.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0, 1.0},
                        { 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0},
                        { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                    }
                },

                {
                    'k', new double [8,8]
                    {
                        { 3.0, 4.0, 4.0, 5.0, 5.0, 4.0, 4.0, 3.0},
                        { 3.0, 4.0, 4.0, 5.0, 5.0, 4.0, 4.0, 3.0},
                        { 3.0, 4.0, 4.0, 5.0, 5.0, 4.0, 4.0, 3.0},
                        { 3.0, 4.0, 4.0, 5.0, 5.0, 4.0, 4.0, 3.0},
                        { 2.0, 3.0, 3.0, 4.0, 4.0, 3.0, 3.0, 2.0},
                        { 1.0, 2.0, 2.0, 2.0, 2.0, 2.0,2.0, 1.0},
                        { -2.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -2.0},
                        { -2.0, -3.0, -1.0, 0.0, 0.0, -1.0, -3.0, -2.0},
                    }
                },
                {
                    'q', new double [8,8]
                    {

                        { 2.0, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0, 2.0},
                        { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
                        { 1.0, 0.0, -0.5, -0.5, -0.5, -0.5, 0.0, 1.0},
                        { 0.5, 0.0, -0.5, -0.5, -0.5, -0.5, 0.0, 0.5},
                        { 0.0,  0.0, -0.5, -0.5, -0.5, -0.5, 0.0, -0.5},
                        { 1.0, -0.5, -0.5, -0.5, -0.5, -0.5, 0.0, 1.0},
                        { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
                        { 2.0, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0, 2.0},
                    }
                },
                {
                    'r', new double [8,8]
                    {
                        { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        { -0.5, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.5},
                        { 0.5,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5},
                        { 0.5,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5},
                        { 0.5,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5},
                        { 0.5,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5},
                        { 0.5,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5},
                        { 0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0},
                    }
                },
                {
                    'b', new double [8,8]
                    {
                        { 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0},
                        { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0},
                        { 1.0, 0.0, -0.5, -1.0, -1.0, -0.5, 0.0, 1.0},
                        { 1.0, -0.5, -0.5, -1.0, -1.0, -0.5, -0.5, 1.0},
                        { 1.0, 0.0, -1.0, -1.0, -1.0, -1.0, 0.0, 1.0},
                        { 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0},
                        { 1.0, -0.5, 0.0, 0.0, 0.0, 0.0, -0.5, 1.0},
                        { 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0}
                    }
                },
                {
                    'n', new double [8,8]
                    {
                        { 5.0, 4.0, 3.0, 3.0, 3.0, 3.0, 4.0, 5.0},
                        { 4.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 4.0},
                        { 3.0, 0.0, -1.0, -1.5, -1.5, -1.0, 0.0, 3.0},
                        { 3.0, -0.5, -1.5, -2.0, -2.0, -1.5, -0.5, 3.0},
                        { 3.0, 0.0, -1.5, -2.0, -2.0, -1.5, 0.0, 3.0},
                        { 3.0, -0.5, -1.0, -1.5, -1.5, -1.0, -0.5, 3.0},
                        {4.0, 2.0, 0.0, -0.5, -0.5, 0.0, 2.0, 4.0},
                        { 5.0, 4.0, 3.0, 3.0, 3.0, 3.0, 4.0, 5.0},
                    }
                },
                {
                    'p', new double [8,8]
                    {
                        { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        { -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0},
                        { -1.0, -1.0, -2.0, -3.0, -3.0, -2.0, -1.0, -1.0},
                        { -0.5, -0.5, -1.0, -2.5, -2.5, -1.0, -0.5, -0.5},
                        { 0.0, 0.0, 0.0, -2.0, -2.0, 0.0, 0.0, 0.0},
                        { -0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.5, -0.5},
                        { -0.5,  -1.0, -1.0, 2.0, 2.0, -1.0, -1.0, -0.5},
                        { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                    }
                }
        };

        public static double GetFigureFactorAtPosition(char figure, int row, int col)
        {
            if (!FigureFactor.ContainsKey(figure))
            {
                return default;
            }

            return FigureFactor[figure][row, col];
        }

        public static Dictionary<char, double> FigurePrice = new Dictionary<char, double>
        {
            {'K', 900.0 },
            {'Q', 90.0 },
            {'R', 50.0 },
            {'B', 30.0 },
            {'N', 30.0 },
            {'P', 10.0 },

            {'k', -900.0 },
            {'q', -90.0 },
            {'r', -50.0 },
            {'b', -30.0 },
            {'n', -30.0 },
            {'p', -10.0 },
        };
    }
}
